(function () {

    var IconLoader = function (store) {
        var scope = this;

        var defaultVersion = '-1';

        var common = {
            'fontAwesome': {
                cssSelector: '.fa',
                detect: function (target) {
                    return target.classList.contains('fa');
                },
                render: function (icon, target) {
                    target.classList.add('fa');
                    target.classList.add(icon);
                },
                remove: function (target) {
                    target.classList.remove('fa');
                    var exception= ['fa-lg', 'fa-2x', 'fa-3x', 'fa-4x', 'fa-5x', 'fa-fw', 'fa-spin', 'fa-pule', 'fa-rotate-90',
                        'fa-rotate-180', 'fa-rotate-270', 'fa-flip-horizontal', 'fa-flip-vertical'];
                    mw.tools.classNamespaceDelete(target, 'fa-', undefined, undefined, exception);
                },
                icons: function () {
                     return new Promise(function (resolve) {
                         $.get(mw.settings.modules_url + 'microweber/api/fa.icons.js',function (data) {
                             resolve(JSON.parse(data));
                        });
                    });
                },
                name: 'Font Awesome',
                load:  mw.settings.libs_url + 'fontawesome-4.7.0' + '/css/font-awesome.min.css',
                unload: function () {
                    document.querySelector('link[href*="fontawesome-4.7.0"]').remove();
                },
                version: '4.7.0'
            },
            'materialIcons': {
                cssSelector: '.material-icons',
                detect: function (target) {
                    return target.classList.contains('material-icons');
                },
                render: function (icon, target) {
                    target.classList.add('material-icons');
                    target.innerHTML = (icon);
                },
                remove: function (target) {
                    mw.tools.removeClass(target, 'material-icons');
                    target.innerHTML = '';
                 },
                icons: function () {
                    return new Promise(function (resolve) {
                        $.get(mw.settings.modules_url + 'microweber/api/material.icons.js',function (data) {
                            resolve(JSON.parse(data));
                        });
                    });
                },
                name: 'Material Icons',
                load: mw.settings.libs_url + 'material_icons' + '/material_icons.css',
                unload: function () {
                    top.document.querySelector('link[href*="material_icons.css"]').remove();
                },
                version: 'mw'
            },
            'iconsMindLine': {
                cssSelector: '[class*="mw-micon-"]:not([class*="mw-micon-solid-"])',
                detect: function (target) {
                    return target.className.includes('mw-micon-') && !target.className.includes('mw-micon-solid-');
                },
                render: function (icon, target) {
                    target.classList.add(icon);
                },
                remove: function (target) {
                    mw.tools.classNamespaceDelete(target, 'mw-micon-', undefined, undefined, []);
                },
                icons: function () {
                    var scope = this;
                    var parse = function (cssLink) {
                        if(!cssLink.sheet){
                            return;
                        }
                        var icons = cssLink.sheet.cssRules;
                         var l = icons.length, i = 0, mindIcons = [];
                         for (; i < l; i++) {
                            var sel = icons[i].selectorText;
                            if (!!sel && sel.indexOf('.mw-micon-') === 0) {
                                var cls = sel.replace(".", '').split(':')[0];
                                mindIcons.push(cls);
                            }
                        }
                        return mindIcons
                    };
                    var load = function (cb) {
                        var cssLink = mw.top().win.document.querySelector('link[href*="mw-icons-mind/line"]');
                        if(cssLink) {
                            cb.call(undefined, cssLink);
                        }  else {
                            $.get(scope.load, function (data) {
                                cssLink = document.createElement('link');
                                cssLink.type = 'text/css';
                                cssLink.rel = 'stylesheet';
                                cssLink.href = scope.load;
                                $(document.head).append(cssLink);
                                cb.call(undefined, cssLink);
                            });
                        }
                    };
                    return new Promise(function (resolve) {
                        load(function (link) {
                            resolve(parse(link));
                        });
                    });
                },
                name: 'Icons Mind Line',
                load:  mw.settings.modules_url + 'microweber/api/libs/mw-icons-mind/line/style.css',
                unload: function () {
                    document.querySelector('link[href*="mw-icons-mind/line/style"]').remove();
                },
                version: 'mw_local'
            },
            'iconsMindSolid': {
                cssSelector: '[class*="mw-micon-solid-"]',
                detect: function (target) {
                    return target.className.includes('mw-micon-solid-');
                },
                render: function (icon, target) {
                    target.classList.add(icon);
                },
                remove: function (target) {
                    mw.tools.classNamespaceDelete(target, 'mw-micon-solid-', undefined, undefined, []);
                },
                icons: function () {
                    var scope = this;
                    var parse = function (cssLink) {
                        var icons = cssLink.sheet.cssRules;
                        var l = icons.length, i = 0, mindIcons = [];
                        for (; i < l; i++) {
                            var sel = icons[i].selectorText;
                            if (!!sel && sel.indexOf('.mw-micon-solid-') === 0) {
                                var cls = sel.replace(".", '').split(':')[0];
                                mindIcons.push(cls);
                            }
                        }
                        return mindIcons
                    };
                    var load = function (cb) {
                        var cssLink = mw.top().win.document.querySelector('link[href*="mw-icons-mind/solid"]');
                         if(cssLink) {
                            cb.call(undefined, cssLink);
                        }  else {
                            $.get(scope.load, function (data) {
                                cssLink = document.createElement('link');
                                cssLink.type = 'text/css';
                                cssLink.rel = 'stylesheet';
                                cssLink.href = scope.load;
                                $(document.head).append(cssLink);
                                cb.call(undefined, cssLink);
                            });
                        }
                    };
                    return new Promise(function (resolve) {
                        load(function (link) {
                            resolve(parse(link));
                        });
                    });
                },
                name: 'Icons Mind Solid',
                load:  mw.settings.modules_url + 'microweber/api/libs/mw-icons-mind/solid/style.css',
                unload: function () {
                    document.querySelector('link[href*="mw-icons-mind/solid/style"]').remove();
                },
                version: 'mw_local'
            },

            'materialDesignIcons': {
                cssSelector: '.mdi',
                detect: function (target) {
                    return target.classList.contains('mdi');
                },
                render: function (icon, target) {
                    target.classList.add('mdi');
                    target.classList.add(icon);
                },
                remove: function (target) {
                    mw.tools.classNamespaceDelete(target, 'mdi-', undefined, undefined, []);
                    target.classList.remove('mdi');
                },
                icons: function () {
                    var scope = this;
                    var load = function (cb) {
                        var cssLink = mw.top().win.document.querySelector('link[href*="materialdesignicons"]');
                        if(cssLink) {
                            cb.call(undefined, cssLink);
                        }  else {
                            $.get(scope.load, function (data) {
                                cssLink = document.createElement('link');
                                cssLink.type = 'text/css';
                                cssLink.rel = 'stylesheet';
                                cssLink.href = scope.load;
                                $(document.head).append(cssLink);
                                cb.call(undefined, cssLink);
                            });
                        }
                    };
                    return new Promise(function (resolve) {
                        load(function (link){
                            if(!link || !link.sheet) {
                                resolve([]);
                                return;
                            }
                            var icons = link.sheet.cssRules;
                            var l = icons.length, i = 0, mdiIcons = [];
                            for (; i < l; i++) {
                                var sel = icons[i].selectorText;
                                if (!!sel && sel.indexOf('.mdi-') === 0) {
                                    var cls = sel.replace(".", '').split(':')[0];
                                    mdiIcons.push(cls);
                                }
                            }
                            resolve(mdiIcons);
                        });
                    });
                },
                name: 'Material Design Icons',
                load:  mw.settings.modules_url + 'microweber/css/fonts/materialdesignicons/css/materialdesignicons.min.css',
                unload: function () {
                    document.querySelector('link[href*="materialdesignicons"]').remove();
                },
                version: 'mw_local'
            },
            'mwIcons': {
                cssSelector: '[class*="mw-icon-"]',
                detect: function (target) {
                    return target.className.includes('mw-icon-');
                },
                render: function (icon, target) {
                    target.classList.add(icon);
                },
                remove: function (target) {
                    mw.tools.classNamespaceDelete(target, 'mw-icon-', undefined, undefined, []);
                },
                icons: function () {
                    return new Promise(function (resolve) {
                        $.get(mw.settings.modules_url + 'microweber/api/microweber.icons.js',function (data) {
                            resolve(JSON.parse(data));
                        });
                    });
                },
                name: 'Microweber Icons',
                load:  mw.settings.modules_url + 'microweber/css/fonts/materialdesignicons/css/materialdesignicons.min.css',
                unload: function () {
                    document.querySelector('link[href*="materialdesignicons"]').remove();
                },
                version: 'mw_local'
            },
            SVGIcons: {
                cssSelector: 'svg[viewBox]',
                detect: function (target) {
                    return target.nodeName === 'SVG'
                },
                render: function (icon, target) {
                     target.innerHTML = icon;
                     var svg = target.querySelector('svg');
                     if (svg) {
                         svg.setAttribute('width', '1em');
                         svg.setAttribute('fill', 'currentColor');
                         svg.setAttribute('height', '1em');
                         svg.style.width = '1em';
                         svg.style.height = '1em';
                         svg.style.fill = 'currentColor';

                     }
                },
                remove: function (target) {
                    target.innerHTML = ''
                },
                icons: function () {
                    return new Promise(function (resolve) {
                        resolve([
                            `<svg width="48px" height="48px" viewBox="0 0 48 48" xmlns="http://www.w3.org/2000/svg" enable-background="new 0 0 48 48">
                                <path fill="#424242" d="M27,7h-6c-1.7,0-3,1.3-3,3v3h2v-3c0-0.6,0.4-1,1-1h6c0.6,0,1,0.4,1,1v3h2v-3C30,8.3,28.7,7,27,7z"/>
                                <path fill="#E65100" d="M40,43H8c-2.2,0-4-1.8-4-4V15c0-2.2,1.8-4,4-4h32c2.2,0,4,1.8,4,4v24C44,41.2,42.2,43,40,43z"/>
                                <path fill="#FF6E40" d="M40,28H8c-2.2,0-4-1.8-4-4v-9c0-2.2,1.8-4,4-4h32c2.2,0,4,1.8,4,4v9C44,26.2,42.2,28,40,28z"/>
                                <path fill="#FFF3E0" d="M26,26h-4c-0.6,0-1-0.4-1-1v-2c0-0.6,0.4-1,1-1h4c0.6,0,1,0.4,1,1v2C27,25.6,26.6,26,26,26z"/>
                            </svg>`,
                            `
<svg height='300px' width='300px'  fill="#000000" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 128 128" style="enable-background:new 0 0 128 128;" xml:space="preserve"><style type="text/css">
\t.st0{display:none;}
\t.st1{display:inline;}
\t.st2{fill:none;stroke:#000000;stroke-width:0.1;stroke-miterlimit:10;}
</style><g class="st0"><g class="st1"><rect class="st2" width="128" height="128"></rect><line class="st2" x1="0" y1="124" x2="128" y2="124"></line><line class="st2" x1="0" y1="120" x2="128" y2="120"></line><line class="st2" x1="0" y1="116" x2="128" y2="116"></line><line class="st2" x1="0" y1="112" x2="128" y2="112"></line><line class="st2" x1="0" y1="108" x2="128" y2="108"></line><line class="st2" x1="0" y1="104" x2="128" y2="104"></line><line class="st2" x1="0" y1="100" x2="128" y2="100"></line><line class="st2" x1="0" y1="96" x2="128" y2="96"></line><line class="st2" x1="0" y1="92" x2="128" y2="92"></line><line class="st2" x1="0" y1="88" x2="128" y2="88"></line><line class="st2" x1="0" y1="84" x2="128" y2="84"></line><line class="st2" x1="0" y1="80" x2="128" y2="80"></line><line class="st2" x1="0" y1="76" x2="128" y2="76"></line><line class="st2" x1="0" y1="72" x2="128" y2="72"></line><line class="st2" x1="0" y1="68" x2="128" y2="68"></line><line class="st2" x1="0" y1="64" x2="128" y2="64"></line><line class="st2" x1="0" y1="60" x2="128" y2="60"></line><line class="st2" x1="0" y1="56" x2="128" y2="56"></line><line class="st2" x1="0" y1="52" x2="128" y2="52"></line><line class="st2" x1="0" y1="48" x2="128" y2="48"></line><line class="st2" x1="0" y1="44" x2="128" y2="44"></line><line class="st2" x1="0" y1="40" x2="128" y2="40"></line><line class="st2" x1="0" y1="36" x2="128" y2="36"></line><line class="st2" x1="0" y1="32" x2="128" y2="32"></line><line class="st2" x1="0" y1="28" x2="128" y2="28"></line><line class="st2" x1="0" y1="24" x2="128" y2="24"></line><line class="st2" x1="0" y1="20" x2="128" y2="20"></line><line class="st2" x1="0" y1="16" x2="128" y2="16"></line><line class="st2" x1="0" y1="12" x2="128" y2="12"></line><line class="st2" x1="0" y1="8" x2="128" y2="8"></line><line class="st2" x1="0" y1="4" x2="128" y2="4"></line><line class="st2" x1="124" y1="0" x2="124" y2="128"></line><line class="st2" x1="120" y1="0" x2="120" y2="128"></line><line class="st2" x1="116" y1="0" x2="116" y2="128"></line><line class="st2" x1="112" y1="0" x2="112" y2="128"></line><line class="st2" x1="108" y1="0" x2="108" y2="128"></line><line class="st2" x1="104" y1="0" x2="104" y2="128"></line><line class="st2" x1="100" y1="0" x2="100" y2="128"></line><line class="st2" x1="96" y1="0" x2="96" y2="128"></line><line class="st2" x1="92" y1="0" x2="92" y2="128"></line><line class="st2" x1="88" y1="0" x2="88" y2="128"></line><line class="st2" x1="84" y1="0" x2="84" y2="128"></line><line class="st2" x1="80" y1="0" x2="80" y2="128"></line><line class="st2" x1="76" y1="0" x2="76" y2="128"></line><line class="st2" x1="72" y1="0" x2="72" y2="128"></line><line class="st2" x1="68" y1="0" x2="68" y2="128"></line><line class="st2" x1="64" y1="0" x2="64" y2="128"></line><line class="st2" x1="60" y1="0" x2="60" y2="128"></line><line class="st2" x1="56" y1="0" x2="56" y2="128"></line><line class="st2" x1="52" y1="0" x2="52" y2="128"></line><line class="st2" x1="48" y1="0" x2="48" y2="128"></line><line class="st2" x1="44" y1="0" x2="44" y2="128"></line><line class="st2" x1="40" y1="0" x2="40" y2="128"></line><line class="st2" x1="36" y1="0" x2="36" y2="128"></line><line class="st2" x1="32" y1="0" x2="32" y2="128"></line><line class="st2" x1="28" y1="0" x2="28" y2="128"></line><line class="st2" x1="24" y1="0" x2="24" y2="128"></line><line class="st2" x1="20" y1="0" x2="20" y2="128"></line><line class="st2" x1="16" y1="0" x2="16" y2="128"></line><line class="st2" x1="12" y1="0" x2="12" y2="128"></line><line class="st2" x1="8" y1="0" x2="8" y2="128"></line><line class="st2" x1="4" y1="0" x2="4" y2="128"></line></g></g><g><g><path d="M64,7C32.5,7,7,32.5,7,64s25.5,57,57,57s57-25.5,57-57S95.5,7,64,7z M90.8,81.6c-1.3,0.8-3,0.6-4.1-0.4    L67.7,92.3c0.3,1.4-0.3,3-1.7,3.8c-1.7,1-3.9,0.4-4.9-1.3c-0.4-0.7-0.5-1.6-0.4-2.3L41.3,81.3c-0.2,0.1-0.3,0.3-0.5,0.4    c-1.7,1-3.9,0.4-4.9-1.3s-0.4-3.9,1.3-4.9c0.2-0.1,0.4-0.2,0.6-0.3l-0.1-22.4c-0.8-0.3-1.5-0.8-1.9-1.6c-1-1.7-0.4-3.9,1.3-4.9    c1.4-0.8,3.1-0.6,4.2,0.5l19-11C60,34.4,60.6,32.8,62,32c1.7-1,3.9-0.4,4.9,1.3c0.5,0.8,0.6,1.7,0.4,2.5l19.4,11.1    c0.2-0.1,0.3-0.2,0.5-0.3c1.7-1,3.9-0.4,4.9,1.3c1,1.7,0.4,3.9-1.3,4.9c-0.2,0.1-0.3,0.2-0.5,0.2l0.1,22.2    c0.8,0.3,1.5,0.8,1.9,1.6C93.1,78.4,92.5,80.6,90.8,81.6z"></path><path d="M62.8,53.4V38.4c-0.5-0.2-1-0.4-1.4-0.8l-19,11.1c0.1,0.5,0.1,1.1,0,1.6l13.2,7.5    C57.2,55.5,59.8,53.8,62.8,53.4z"></path><path d="M53.6,64c0-1.6,0.4-3.1,1-4.4l-13.2-7.5c-0.2,0.2-0.4,0.4-0.7,0.5c-0.3,0.2-0.6,0.3-0.9,0.4l0.1,22.2    c0.6,0.1,1.1,0.4,1.5,0.9l13.2-7.5C54,67.1,53.6,65.6,53.6,64z"></path><path d="M88.1,53.1c-0.6-0.1-1.2-0.4-1.7-0.9l-12.6,6.9c0.8,1.5,1.2,3.1,1.2,4.9c0,1.6-0.4,3.1-1,4.5    c0,0,0,0,0,0l12.7,7.2c0.1-0.1,0.3-0.2,0.4-0.3c0.3-0.2,0.6-0.3,0.9-0.4L88.1,53.1z"></path><path d="M71.7,67.8c0-2.9-2.4-5.2-5.4-5.2h-3.9c-3,0-5.4,2.3-5.4,5.2V70h14.7V67.8z"></path><circle cx="64.3" cy="58.6" r="3.1"></circle><path d="M85.7,79.5c-0.2-0.7-0.2-1.4,0-2l-12.6-7.2c0,0,0,0,0,0c-1.8,2.5-4.7,4.3-8,4.5l0.1,14.8    c0.6,0.2,1.1,0.5,1.6,0.9L85.7,79.5z"></path><path d="M62.4,89.9c0.2-0.1,0.5-0.2,0.7-0.3L63,74.7c-3.1-0.4-5.7-2-7.4-4.4l-13.1,7.5c0.2,0.6,0.1,1.2,0,1.8    l19.2,11C61.8,90.3,62.1,90.1,62.4,89.9z"></path><path d="M64.8,53.3c3.2,0.1,6.1,1.7,8,4.1l12.7-7c-0.1-0.6-0.1-1.2,0.1-1.8l-19.2-11c-0.2,0.2-0.4,0.4-0.7,0.6    c-0.2,0.1-0.5,0.2-0.8,0.3V53.3z"></path></g></g></svg>`,
                            `
<svg height='300px' width='300px'  fill="#000000" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 60 60" style="enable-background:new 0 0 60 60;" xml:space="preserve"><path d="M28.2617188,22.5317383c2.6308594,0,4.6923828-1.4140625,4.6923828-3.21875s-2.0615234-3.21875-4.6923828-3.21875  s-4.6923828,1.4140625-4.6923828,3.21875S25.6308594,22.5317383,28.2617188,22.5317383z M28.2617188,18.0942383  c1.6181641,0,2.6923828,0.7333984,2.6923828,1.21875s-1.0742188,1.21875-2.6923828,1.21875s-2.6923828-0.7333984-2.6923828-1.21875  S26.6435547,18.0942383,28.2617188,18.0942383z"></path><path d="M12.8623047,30.3500977c0.0351563,0,0.0703125,0,0.1054688-0.0009766  c0.9921875-0.0244141,2.0800781-0.3818359,3.0634766-1.0063477c2.2207031-1.409668,3.2041016-3.7080078,2.2373047-5.2319336  c-0.5058594-0.796875-1.4726563-1.2504883-2.6230469-1.2089844c-0.9921875,0.0244141-2.0810547,0.3818359-3.0644531,1.0063477  s-1.7695313,1.4570313-2.2138672,2.3447266c-0.5205078,1.0385742-0.5283203,2.0908203-0.0224609,2.887207  C10.8349609,29.9125977,11.7490234,30.3500977,12.8623047,30.3500977z M12.1552734,27.1479492  c0.2802734-0.5595703,0.8261719-1.125,1.4980469-1.5512695c0.671875-0.4267578,1.4160156-0.6801758,2.0410156-0.6953125  c0.0195313-0.0004883,0.0380859-0.0004883,0.0576172-0.0004883c0.4013672,0,0.7158203,0.105957,0.8271484,0.28125  c0.2597656,0.409668-0.2529297,1.6049805-1.6201172,2.472168c-0.6708984,0.4267578-1.4150391,0.6801758-2.0400391,0.6953125  c-0.4414063,0.0092773-0.7685547-0.0976563-0.8857422-0.28125C11.9169922,27.8842773,11.9638672,27.5317383,12.1552734,27.1479492z"></path><path d="M38.1679688,30.4379883c2.5332031,0,4.59375-2.0605469,4.59375-4.59375s-2.0605469-4.59375-4.59375-4.59375  s-4.59375,2.0605469-4.59375,4.59375S35.6347656,30.4379883,38.1679688,30.4379883z M38.1679688,23.2504883  c1.4306641,0,2.59375,1.1635742,2.59375,2.59375s-1.1630859,2.59375-2.59375,2.59375s-2.59375-1.1635742-2.59375-2.59375  S36.7373047,23.2504883,38.1679688,23.2504883z"></path><path d="M9.0898438,35.2397461c1.2314453,1.0439453,2.8076172,1.4057617,4.6835938,1.4057617  c1.8779297,0,4.0556641-0.362793,6.4902344-0.7680664c1.0871582-0.1810913,2.2422485-0.3633423,3.4246826-0.5308838  c-0.3710938,4.0415649-0.9393921,8.1288452-1.5008545,12.0963135c-0.2890625,2.0444336-0.578125,4.0874023-0.8417969,6.128418  c-0.0341797,0.2719727,0.0429688,0.5458984,0.2158203,0.7583008s0.4248047,0.3452148,0.6982422,0.3666992  C24.8271484,54.8984375,27.4140625,54.9995117,30,54.9995117s5.1728516-0.1010742,7.7402344-0.3032227  c0.2734375-0.0214844,0.5253906-0.1542969,0.6982422-0.3666992s0.25-0.4863281,0.2158203-0.7583008  c-0.2626953-2.0380859-0.5517578-4.078125-0.8408203-6.1201172c-0.5615234-3.9699097-1.1290894-8.0599976-1.5007324-12.1044922  c1.182251,0.1674805,2.3372803,0.3497314,3.4245605,0.5307617c4.8662109,0.8100586,8.7089844,1.4492188,11.1728516-0.637207  c1.5800781-1.3383789,2.3154297-3.5673828,2.3154297-7.0141602c0-4.2241821-1.1391602-8.1848755-3.118042-11.6013184  c-0.0227051-0.0455933-0.0452881-0.0884399-0.0750732-0.1304932c-1.833374-3.1185303-4.3726196-5.7717896-7.3982544-7.7415161  c-0.0449829-0.0357056-0.0913086-0.0634155-0.1410522-0.0905151C38.8828125,6.3486328,34.597168,5.0004883,30,5.0004883  c-2.2299194,0-4.3847656,0.3223877-6.4275513,0.9118042c-0.1835938,0.0012207-0.359314,0.0504761-0.5181274,0.1499634  C13.630127,9.0220337,6.7744141,17.8380127,6.7744141,28.2260742C6.7744141,31.6728516,7.5097656,33.9013672,9.0898438,35.2397461z   M35.8339844,47.7314453c0.2382813,1.6835938,0.4755859,3.3662109,0.6992188,5.0478516  c-4.3398438,0.2939453-8.7265625,0.2939453-13.0664063,0c0.2236328-1.684082,0.4619141-3.3696289,0.7011719-5.0561523  c0.5846558-4.1326294,1.1796265-8.3963013,1.5535889-12.6279297C27.1127319,34.9451904,28.5383911,34.8344727,30,34.8344727  c1.4619141,0,2.8878174,0.1107788,4.2793579,0.2608643C34.6533203,39.329834,35.2483521,43.5958862,35.8339844,47.7314453z   M47.9787598,16.9968872c-0.8066406,0.8303833-1.9194336,1.3161011-3.092041,1.3161011c-2.3779297,0-4.3125-1.9345703-4.3125-4.3125  c0-1.2546997,0.5410156-2.4210205,1.4664917-3.2342529C44.421814,12.4133911,46.4382935,14.5395508,47.9787598,16.9968872z   M24.0117188,9.9379883c0,1.6196289-1.3173828,2.9375-2.9375,2.9375c-1.4001465,0-2.5668335-0.9705811-2.8621826-2.2883911  c1.5739136-1.0552979,3.3004761-1.8951416,5.1326904-2.5022583C23.7698975,8.6047974,24.0117188,9.2527466,24.0117188,9.9379883z   M16.5269775,11.8379517c0.7440186,1.7896118,2.4926147,3.0375366,4.5472412,3.0375366c2.7226563,0,4.9375-2.2148438,4.9375-4.9375  c0-0.8597412-0.2270508-1.6858521-0.6364746-2.4146729C26.8661499,7.1903076,28.4101563,7.0004883,30,7.0004883  c3.7329102,0,7.2387695,0.9761963,10.2895508,2.675293c-1.0913086,1.1566772-1.715332,2.6904907-1.715332,4.324707  c0,3.480957,2.8320313,6.3125,6.3125,6.3125c1.5170288,0,2.9680176-0.5516357,4.1004028-1.5179443  c1.4193726,2.8455811,2.2384644,6.0409546,2.2384644,9.4310303c0,2.7758789-0.5263672,4.5712891-1.6083984,5.487793  c-1.7568359,1.4892578-5.1943359,0.9160156-9.5517578,0.190918C37.0537109,33.402832,33.640625,32.8344727,30,32.8344727  c-3.6396484,0-7.0537109,0.5683594-10.0654297,1.0698242c-4.3544922,0.7250977-7.7949219,1.2988281-9.5517578-0.1904297  c-1.0820313-0.9169922-1.6083984-2.7119141-1.6083984-5.487793C8.7744141,21.6334839,11.7963867,15.7340698,16.5269775,11.8379517z"></path></svg>`,

                            `
<svg height='300px' width='300px'  fill="#000000" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve"><path d="M36.4,38.1c-0.5,0-1,0.4-1,1v2.6c0,0.5,0.4,1,1,1h2.2c0.3,1.5,0.9,3,1.7,4.2l-1.5,1.5c-0.4,0.4-0.4,1,0,1.4l1.9,1.8  c0.4,0.4,1,0.4,1.4,0l1.5-1.5c1.3,0.8,2.7,1.4,4.2,1.7v2.2c0,0.5,0.4,1,1,1h2.6c0.5,0,1-0.4,1-1v-2.2c1.5-0.3,3-0.9,4.2-1.7l1.5,1.5  c0.4,0.4,1,0.4,1.4,0l1.8-1.8c0.4-0.4,0.4-1,0-1.4l-1.5-1.5c0.8-1.3,1.4-2.7,1.7-4.2h2.2c0.5,0,1-0.4,1-1V39c0-0.5-0.4-1-1-1h-2.2  c-0.3-1.5-0.9-3-1.7-4.2l1.5-1.5c0.4-0.4,0.4-1,0-1.4l-1.9-1.9c-0.4-0.4-1-0.4-1.4,0l-1.5,1.5c-1.3-0.8-2.7-1.4-4.2-1.7v-2.2  c0-0.5-0.4-1-1-1h-2.6c-0.5,0-1,0.4-1,1v2.2c-1.5,0.3-3,0.9-4.2,1.7L42,29.1c-0.4-0.4-1-0.4-1.4,0L38.8,31c-0.4,0.4-0.4,1,0,1.4  l1.5,1.5c-0.8,1.3-1.4,2.7-1.7,4.2H36.4z M42.9,44.3H45c0.4,1.4,1.1,2.6,1.7,3.5C45.1,47.1,43.8,45.8,42.9,44.3z M49.2,48.1  c-0.8-0.8-1.8-2.1-2.4-3.8h2.4V48.1z M49.2,42.6h-2.9c-0.1-0.7-0.2-1.5-0.2-2.3c0-0.8,0.1-1.6,0.2-2.3h2.9V42.6z M53.2,47.8  c0.7-0.9,1.3-2.1,1.7-3.5h2.1C56.2,45.8,54.9,47.1,53.2,47.8z M58.1,40.3c0,0.8-0.1,1.6-0.3,2.3h-2.4c0.1-0.7,0.2-1.5,0.2-2.3  c0-0.8-0.1-1.6-0.2-2.3h2.4C58,38.8,58.1,39.5,58.1,40.3z M57.1,36.4H55c-0.4-1.4-1.1-2.6-1.7-3.5C54.9,33.6,56.2,34.8,57.1,36.4z   M50.8,32.6c0.8,0.8,1.8,2.1,2.4,3.8h-2.4V32.6z M50.8,38h2.9c0.1,0.7,0.2,1.5,0.2,2.3c0,0.8-0.1,1.6-0.2,2.3h-2.9V38z M50.8,44.3  h2.4c-0.6,1.8-1.6,3.1-2.4,3.9V44.3z M49.2,32.5v3.9h-2.4C47.4,34.6,48.4,33.3,49.2,32.5z M46.8,32.9c-0.7,0.9-1.3,2.1-1.7,3.5h-2.1  C43.8,34.8,45.1,33.6,46.8,32.9z M42.2,38h2.4c-0.1,0.7-0.2,1.5-0.2,2.3c0,0.8,0.1,1.6,0.2,2.3h-2.4c-0.2-0.7-0.3-1.5-0.3-2.3  C41.9,39.5,42,38.8,42.2,38z M99,74.2H80.7h0h-9.4h0h-8.9H50h0h0h0H37.7h-8.9h0h-9.4h0H1c0.1-7.6-0.2-11.7,4.7-13.5  c4.5-1.7,7.2-3.5,7.2-3.5l3.5,10.9l0.5,1.5l1.5-4.4c-3.6-5,0.3-5.2,0.9-5.2l0,0h0h0h0c0,0,0,0,0,0l0,0c0.7,0,4.5,0.2,0.9,5.2  l1.5,4.4l0.5-1.5l3.5-10.9c0,0,2.1,1.4,5.8,2.9c0.7-0.6,1.6-1.1,2.7-1.5c5.2-2,8.3-4,8.3-4l0,0l0,0l4,12.6l0.5,1.7l1.8-5.1  c-4.1-5.7,0.3-6,1.1-6v0h0c0,0,0,0,0,0h0h0h0c0,0,0,0,0,0h0c0,0,0,0,0,0h0v0c0.8,0,5.2,0.3,1.1,6l1.8,5.1l0.5-1.7l4-12.6l0,0l0,0  c0,0,3.1,2,8.3,4c1.1,0.4,2,0.9,2.7,1.5c3.6-1.5,5.8-2.9,5.8-2.9l3.5,10.9l0.5,1.5l1.5-4.4c-3.6-5,0.3-5.2,0.9-5.2l0,0h0h0  c0,0,0,0,0,0c0,0,0,0,0,0l0,0c0.7,0,4.5,0.2,0.9,5.2l1.5,4.4l0.5-1.5l3.5-10.9c0,0,2.7,1.8,7.2,3.5C99.2,62.5,98.9,66.6,99,74.2z   M68.9,42.9c-0.5,0-0.8,0.4-0.8,0.8V46c0,0.5,0.4,0.8,0.8,0.8h1.9c0.3,1.3,0.8,2.6,1.5,3.6l-1.3,1.3c-0.3,0.3-0.3,0.9,0,1.2l1.6,1.6  c0.3,0.3,0.9,0.3,1.2,0l1.3-1.3c1.1,0.7,2.3,1.2,3.6,1.5v1.9c0,0.5,0.4,0.8,0.8,0.8h2.3c0.5,0,0.8-0.4,0.8-0.8v-1.9  c1.3-0.3,2.6-0.8,3.6-1.5l1.3,1.3c0.3,0.3,0.9,0.3,1.2,0l1.6-1.6c0.3-0.3,0.3-0.9,0-1.2L89,50.5c0.7-1.1,1.2-2.3,1.5-3.6h1.9  c0.5,0,0.8-0.4,0.8-0.8v-2.3c0-0.5-0.4-0.8-0.8-0.8h-1.9c-0.3-1.3-0.8-2.6-1.5-3.6l1.3-1.3c0.3-0.3,0.3-0.9,0-1.2l-1.6-1.6  c-0.3-0.3-0.9-0.3-1.2,0l-1.3,1.3c-1.1-0.7-2.3-1.2-3.6-1.5v-1.9c0-0.5-0.4-0.8-0.8-0.8h-2.3c-0.5,0-0.8,0.4-0.8,0.8V35  c-1.3,0.3-2.6,0.8-3.6,1.5l-1.3-1.3c-0.3-0.3-0.9-0.3-1.2,0l-1.6,1.6c-0.3,0.3-0.3,0.9,0,1.2l1.3,1.3c-0.7,1.1-1.2,2.3-1.5,3.6H68.9  z M80.6,39.7c2.9,0,5.2,2.3,5.2,5.2s-2.3,5.2-5.2,5.2s-5.2-2.3-5.2-5.2S77.8,39.7,80.6,39.7z M7.6,42.9c-0.5,0-0.8,0.4-0.8,0.8V46  c0,0.5,0.4,0.8,0.8,0.8h1.9c0.3,1.3,0.8,2.6,1.5,3.6l-1.3,1.3c-0.3,0.3-0.3,0.9,0,1.2l1.6,1.6c0.3,0.3,0.9,0.3,1.2,0l1.3-1.3  c1.1,0.7,2.3,1.2,3.6,1.5v1.9c0,0.5,0.4,0.8,0.8,0.8h2.3c0.5,0,0.8-0.4,0.8-0.8v-1.9c1.3-0.3,2.6-0.8,3.6-1.5l1.3,1.3  c0.3,0.3,0.9,0.3,1.2,0l1.6-1.6c0.3-0.3,0.3-0.9,0-1.2l-1.3-1.3c0.7-1.1,1.2-2.3,1.5-3.6h1.9c0.5,0,0.8-0.4,0.8-0.8v-2.3  c0-0.5-0.4-0.8-0.8-0.8h-1.9c-0.3-1.3-0.8-2.6-1.5-3.6l1.3-1.3c0.3-0.3,0.3-0.9,0-1.2l-1.6-1.6c-0.3-0.3-0.9-0.3-1.2,0L25,36.5  c-1.1-0.7-2.3-1.2-3.6-1.5v-1.9c0-0.5-0.4-0.8-0.8-0.8h-2.3c-0.5,0-0.8,0.4-0.8,0.8V35c-1.3,0.3-2.6,0.8-3.6,1.5l-1.3-1.3  c-0.3-0.3-0.9-0.3-1.2,0l-1.6,1.6c-0.3,0.3-0.3,0.9,0,1.2l1.3,1.3c-0.7,1.1-1.2,2.3-1.5,3.6H7.6z M19.4,39.7c2.9,0,5.2,2.3,5.2,5.2  s-2.3,5.2-5.2,5.2s-5.2-2.3-5.2-5.2S16.5,39.7,19.4,39.7z"></path></svg>`,
                            `
<svg height='300px' width='300px'  fill="#000000" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 100 100" enable-background="new 0 0 100 100" xml:space="preserve"><path d="M68.2,36l5.5-5.5c3.4,1.7,7.7,1.1,10.5-1.8c3.6-3.6,3.6-9.4,0-13c-3.6-3.6-9.4-3.6-13,0c-2.8,2.8-3.4,7-1.8,10.4l-5.5,5.5  C65.5,32.9,67,34.4,68.2,36z M75.4,19.9c1.3-1.3,3.4-1.3,4.7,0c1.3,1.3,1.3,3.4,0,4.7c-1.3,1.3-3.4,1.3-4.7,0  C74.1,23.3,74.1,21.2,75.4,19.9z M40.8,10.7c0,4,2.6,7.4,6.2,8.7v7.8c1-0.1,2-0.2,3-0.2c1.1,0,2.1,0.1,3.1,0.2v-7.8  c3.5-1.3,6.1-4.7,6.1-8.6c0-5.1-4.1-9.2-9.2-9.2C44.9,1.6,40.8,5.7,40.8,10.7z M50,7.4c1.8,0,3.3,1.5,3.3,3.3c0,1.8-1.5,3.3-3.3,3.3  c-1.8,0-3.3-1.5-3.3-3.3C46.7,8.9,48.2,7.4,50,7.4z M89.3,40.8c-4,0-7.4,2.5-8.6,6.1h-7.8c0.1,1,0.2,2.1,0.2,3.1c0,1-0.1,2-0.2,3  h7.8c1.2,3.6,4.7,6.2,8.7,6.2c5.1,0,9.2-4.1,9.2-9.2C98.4,44.9,94.3,40.8,89.3,40.8z M89.3,53.3c-1.8,0-3.3-1.5-3.3-3.3  c0-1.8,1.5-3.3,3.3-3.3c1.8,0,3.3,1.5,3.3,3.3C92.6,51.8,91.1,53.3,89.3,53.3z M28.7,15.7c-3.6-3.6-9.4-3.6-13,0  c-3.6,3.6-3.6,9.4,0,13c2.8,2.8,7.1,3.4,10.5,1.8l5.5,5.5c1.2-1.6,2.7-3.1,4.3-4.3l-5.5-5.5C32.2,22.7,31.6,18.6,28.7,15.7z   M24.6,24.6c-1.3,1.3-3.4,1.3-4.7,0c-1.3-1.3-1.3-3.4,0-4.7s3.4-1.3,4.7,0C25.9,21.2,25.9,23.3,24.6,24.6z M73.8,69.4l-5.5-5.5  c-1.2,1.6-2.7,3.1-4.3,4.3l5.5,5.5c-1.7,3.4-1.1,7.7,1.8,10.5c3.6,3.6,9.4,3.6,13,0c3.6-3.6,3.6-9.4,0-13  C81.4,68.4,77.3,67.8,73.8,69.4z M80.1,80.1c-1.3,1.3-3.4,1.3-4.7,0c-1.3-1.3-1.3-3.4,0-4.7c1.3-1.3,3.4-1.3,4.7,0  C81.4,76.7,81.4,78.8,80.1,80.1z M19.4,53h7.8c-0.1-1-0.2-2-0.2-3c0-1.1,0.1-2.1,0.2-3.1h-7.8c-1.3-3.5-4.7-6.1-8.6-6.1  c-5.1,0-9.2,4.1-9.2,9.2c0,5.1,4.1,9.2,9.2,9.2C14.8,59.2,18.2,56.6,19.4,53z M10.7,53.3c-1.8,0-3.3-1.5-3.3-3.3s1.5-3.3,3.3-3.3  c1.8,0,3.3,1.5,3.3,3.3S12.6,53.3,10.7,53.3z M53.1,80.6v-7.8c-1,0.1-2.1,0.2-3.1,0.2c-1,0-2-0.1-3-0.2v7.8  c-3.6,1.2-6.2,4.7-6.2,8.7c0,5.1,4.1,9.2,9.2,9.2c5.1,0,9.2-4.1,9.2-9.2C59.2,85.3,56.7,81.9,53.1,80.6z M50,92.6  c-1.8,0-3.3-1.5-3.3-3.3c0-1.8,1.5-3.3,3.3-3.3c1.8,0,3.3,1.5,3.3,3.3C53.3,91.1,51.8,92.6,50,92.6z M31.7,63.9l-5.5,5.5  c-3.4-1.6-7.6-1-10.4,1.8c-3.6,3.6-3.6,9.4,0,13c3.6,3.6,9.4,3.6,13,0c2.8-2.8,3.4-7.1,1.8-10.5l5.5-5.5  C34.4,67,32.9,65.5,31.7,63.9z M24.6,80.1c-1.3,1.3-3.4,1.3-4.7,0c-1.3-1.3-1.3-3.4,0-4.7c1.3-1.3,3.4-1.3,4.7,0  C25.9,76.7,25.9,78.8,24.6,80.1z M50,31.8c-10.1,0-18.2,8.2-18.2,18.2c0,10.1,8.2,18.2,18.2,18.2S68.2,60.1,68.2,50  C68.2,39.9,60.1,31.8,50,31.8z M59.6,58.3c-2.6-2-5.2-3.3-5.7-3.6c-0.1,0-0.1-0.1-0.1-0.2c0-0.3,0-1.1,0-1.9  c0.3-0.6,0.5-1.2,0.6-1.8c0.1,0,0.1,0.1,0.2,0.1c0.3,0,0.6-0.3,1-1.6c0.4-1.4,0.2-1.8-0.2-1.9c1.1-5.2-1.4-5.3-1.4-5.3  s-0.4-0.7-1.3-1.3c-0.6-0.3-1.3-0.6-2.3-0.6c-0.2,0-0.3,0-0.5,0c-0.4,0-0.8,0.1-1.1,0.2l0,0c-0.4,0.1-0.8,0.4-1.2,0.6  c-0.4,0.3-0.9,0.6-1.2,1c-0.6,0.6-1.1,1.4-1.3,2.4c-0.2,0.8-0.2,1.7,0.1,2.6c0,0-0.1,0-0.1,0c-0.4,0-0.9,0.3-0.4,2  c0.4,1.3,0.7,1.6,0.9,1.6c0.1,0.7,0.3,1.5,0.8,2.3v1.7c0,0.1,0,0.2-0.1,0.2c-0.6,0.3-3.1,1.6-5.7,3.6c-1.9-2.2-3.1-5.1-3.1-8.3  c0-7,5.7-12.7,12.7-12.7c7,0,12.7,5.7,12.7,12.7C62.7,53.2,61.5,56.1,59.6,58.3z"></path></svg>`,
                            `
<svg height='300px' width='300px'  fill="#000000" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" x="0px" y="0px" viewBox="0 0 60 60" style="enable-background:new 0 0 60 60;" xml:space="preserve"><path d="M7.1391602,21.0654907c0.2949219,1.5014648,0.2333984,2.9008789,0.1796875,4.1357422  c-0.0771484,1.7949219-0.1513672,3.4907227,1.0146484,4.7084961c0.8171387,0.852478,2.1378174,1.3329468,4.156189,1.5054932  c-1.4852905,2.3743896-3.5891113,7.0767212-0.7440796,11.6859131c2.0771484,3.3657227,4.7861328,5.1987305,7.6621094,5.1987305  c0.1191406,0,0.2382813-0.003418,0.3574219-0.0092773c3.0054932-0.15802,5.8255615-2.2684326,8.0941162-5.9927979  c0.5058594,1.1411743,1.1963501,1.9146729,2.1412354,1.9146729c0.944519,0,1.6347046-0.7733765,2.1404419-1.9143677  c2.2684937,3.7241821,5.088501,5.8344727,8.0939331,5.9924927c0.1191406,0.0058594,0.2382813,0.0092773,0.3574219,0.0092773  c2.8759766,0,5.5849609-1.8334961,7.6621094-5.1987305c2.8450928-4.609314,0.7416382-9.3114624-0.7434082-11.6859131  c2.0181885-0.1725464,3.3383789-0.6529541,4.1555176-1.5054932c1.1660156-1.2177734,1.0917969-2.9130859,1.0146484-4.7080078  c-0.0537109-1.2353516-0.1152344-2.6347656,0.1630859-4.0703125c0.0371094-0.1030273,0.2236328-0.4448242,0.3730469-0.7197266  c0.9335938-1.7128906,2.671875-4.9018555,1.2294922-7.0375977c-0.9580078-1.4194336-2.9697266-1.9287109-6.1552734-1.5561523  c-6.4680786,0.755249-11.6983032,6.7275391-14.8324585,11.3427124l2.4642944-5.4804077  c0.2265625-0.5039063,0.0019531-1.0957031-0.5019531-1.3222656c-0.5019531-0.2255859-1.0947266-0.0009766-1.3222656,0.5019531  l-2.5594482,5.6921387c-0.4187622-0.5424805-0.9246216-0.8728027-1.5391846-0.8728027  c-0.6149292,0-1.1209717,0.3305054-1.539917,0.873291l-2.5596924-5.692627  c-0.2265625-0.5039063-0.8193359-0.7294922-1.3222656-0.5019531c-0.5039063,0.2265625-0.7285156,0.8183594-0.5019531,1.3222656  l2.4643555,5.4805908c-3.1343384-4.6152954-8.3650513-10.5880127-14.8325195-11.3428955  c-3.1855469-0.3725586-5.1982422,0.1367188-6.1552734,1.5561523c-1.4423828,2.1357422,0.2958984,5.324707,1.2294922,7.0375977  C6.9321289,20.6865845,7.1186523,21.0283813,7.1391602,21.0654907z M19.659668,46.2930298  c-2.2158203,0.1293945-4.4511719-1.3876953-6.2128906-4.2426758c-2.7593994-4.4720459,0.4104004-9.2454834,1.4083862-10.5592041  c5.2419434-0.0101318,9.2642212-0.1811523,11.6707153-0.3191528c-0.0401001,0.8740845-0.0449219,1.5282593-0.0449219,1.7738647  c0,0.6182861,0.0289917,3.8109131,0.5823364,6.640564C25.015686,43.7057495,22.331543,46.152771,19.659668,46.2930298z   M46.5532227,42.050354c-1.7617188,2.8554688-3.9912109,4.3720703-6.2128906,4.2426758  c-2.671875-0.1402588-5.355896-2.5872192-7.4035645-6.7064209c0.5532227-2.8297119,0.5822754-6.0224609,0.5822754-6.6407471  c0-0.2456055-0.0048218-0.8997803-0.0449219-1.7738647c2.4057617,0.1380005,6.4263916,0.3088379,11.666748,0.3190918  C46.1138916,32.7896729,49.291687,37.612854,46.5532227,42.050354z M48.5239258,13.8042603  c2.2705078-0.2661133,3.7871094-0.0200195,4.265625,0.6889648c0.7617188,1.1274414-0.703125,3.8139648-1.328125,4.9614258  c-0.3496094,0.640625-0.5068359,0.9360352-0.5634766,1.2260742c-0.3398438,1.7348633-0.2705078,3.3276367-0.2158203,4.6074219  c0.0732422,1.6845703,0.0878906,2.6655273-0.4609375,3.2382813c-0.6220703,0.6499023-2.1240234,0.9658203-4.5927734,0.9658203  c-5.6264648,0-9.8786011-0.1885986-12.2937622-0.3318481c-0.0515137-0.5498047-0.1171265-1.12323-0.2014771-1.6993408  C35.024231,24.1411743,41.0353394,14.6784668,48.5239258,13.8042603z M31.519043,32.9458618  c0,5.28125-0.9316406,8.4072266-1.5185547,9.1577148c-0.5869141-0.75-1.5195313-3.8759766-1.5195313-9.1577148  s0.9326172-8.4077148,1.5195313-9.1572266C30.5874023,24.5386353,31.519043,27.6646118,31.519043,32.9458618z M7.2104492,14.4932251  c0.4785156-0.7089844,1.9960938-0.9541016,4.265625-0.6889648c7.4877319,0.8742065,13.4997559,10.3372803,15.3908081,13.6569824  c-0.0843506,0.5760498-0.1500244,1.1494141-0.2015381,1.6991577c-2.4151001,0.1432495-6.6671753,0.3318481-12.2927856,0.3318481  c-2.46875,0-3.9716797-0.315918-4.59375-0.9658203C9.2299805,27.953186,9.2446289,26.972229,9.3178711,25.288147  c0.0546875-1.2797852,0.1240234-2.8725586-0.2158203-4.6074219c-0.0566406-0.2900391-0.2138672-0.5854492-0.5634766-1.2260742  C7.9135742,18.3071899,6.4487305,15.6206665,7.2104492,14.4932251z"></path></svg>`,
                            `
                            <svg
                                data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 122.88 116.67"><defs><style>.cls-1{fill-rule:evenodd;}</style></defs><title>database-file</title><path class="cls-1" d="M16.94,25.56c7.76,2.6,18.58,4.2,30.59,4.2s22.82-1.6,30.58-4.2c6.82-2.28,11-5,11-7.72s-4.22-5.45-11-7.73c-7.76-2.58-18.57-4.2-30.57-4.2s-22.83,1.62-30.6,4.2c-14.45,4.83-14.85,10.49,0,15.45Zm89,24.77a1.49,1.49,0,0,0-1-.37.86.86,0,0,0-.22,0H72.89a3.12,3.12,0,0,0-2.22.93,3.09,3.09,0,0,0-.93,2.22v60.38a3.18,3.18,0,0,0,3.15,3.16h46.79a3.18,3.18,0,0,0,3.15-3.16V68.34a1.34,1.34,0,0,0,0-.35,1.51,1.51,0,0,0-.48-1.07L106.12,50.43a.53.53,0,0,0-.12-.1Zm-4.43,4.94V65.46a5.08,5.08,0,0,0,1.25,3.36c.77.77,3.58,2.57,4.75,2.57h10.06v39.67c0,.07-.11.17-.18.22s-.05.1-.15.1H75.33a.26.26,0,0,1-.23-.1.37.37,0,0,1-.1-.22V55.59a.24.24,0,0,1,.1-.22.29.29,0,0,1,.23-.1Zm4.88,9.87V56l10.47,10.62h-9a1.46,1.46,0,0,1-1.45-1.45ZM6,47c.53,2.52,4.63,5,11,7.16,7.76,2.6,18.58,4.2,30.59,4.2,4.18,0,8.23-.2,12.05-.56v6c-3.84.35-7.88.54-12,.54-12.62,0-24.09-1.72-32.45-4.52A37,37,0,0,1,6,55.5V73.22c.53,2.52,4.63,5,11,7.17,7.76,2.58,18.58,4.19,30.59,4.19,4.17,0,8.22-.19,12-.55V90c-3.85.35-7.89.54-12.05.54-12.61,0-24.09-1.73-32.45-4.53A37.33,37.33,0,0,1,6,81.67V99.4c.53,2.51,4.63,5,11,7.16,7.77,2.59,18.58,4.2,30.59,4.2,4.19,0,8.23-.2,12-.57v4.6a8.41,8.41,0,0,0,.07,1.33c-3.87.36-7.93.55-12.11.55-12.61,0-24.09-1.73-32.45-4.53C10.68,110.67,0,105.83,0,100.05V98.16C0,71.77,0,44.23,0,17.88,0,12.31,5.76,7.63,15.06,4.52,23.44,1.72,34.93,0,47.54,0S71.61,1.72,80,4.53s14,7,14.94,11.85a2.91,2.91,0,0,1,.17,1V39.78H89.17v-13A36.86,36.86,0,0,1,80,31.14C71.63,34,60.16,35.67,47.55,35.67S23.45,34,15.06,31.14A36.93,36.93,0,0,1,6,26.86V47Z"/></svg>`


                        ])
                    });
                },
                name: 'Vector Icons',
                load:  null,
                unload: function () {

                },
                version: 'mw_local'
            },
        };

        var storage = function () {
            if(!mw.top().__IconStorage) {
                mw.top().__IconStorage = [];
            }
            return mw.top().__IconStorage;
        };

        this.storage = store || storage;


        var iconSetKey = function (options) {
            return options.name + options.version;
        };

        var iconSetPush = function (options) {
            if(!storage().find(function (a) {return iconSetKey(options) === iconSetKey(a); })) {
                return storage().push(options);
            }
            return false;
        };

        var addFontIconSet = function (options) {
            options.version = options.version || defaultVersion;
            iconSetPush(options);

            if (typeof options.load === 'string') {
                mw.require(options.load);
            } else if (typeof options.load === 'function') {
                options.load();
            }
        };
        var addIconSet = function (conf) {

            if(typeof conf === 'string') {
                if (common[conf]) {
                    conf = common[conf];
                } else {
                    console.warn(conf + ' is not defined.');
                    return;
                }
            }
             if(!conf) return;
            conf.type = conf.type || 'font';
            if (conf.type === 'font') {
                return addFontIconSet(conf);
            }
        };

        this.addIconSet = function (conf) {
            addIconSet(conf);
            return this;
        };

        this.removeIconSet = function (name, version) {
            var str = storage();
            var item = str.find(function (a) { return a.name === name && (!version || a.version === version); });
            if (item) {
                if (item.unload) {
                    item.unload();
                }
                str.splice(str.indexOf(item), 1);
            }
        };


        this.init = function () {
            storage().forEach(function (iconSet){
                scope.addIconSet(iconSet);
            });
        };

    };

    mw.iconLoader = function (options) {
        return new IconLoader(options);
    };


})();


(function (){

    var IconPicker = function (options) {
        options = options || {};
        var loader = mw.iconLoader();
        var defaults = {
            iconsPerPage: 40,
            iconOptions: {
                size: true,
                color: true,
                reset: false
            }
        };


        this.settings = mw.object.extend(true, {}, defaults, options);
        var scope = this;
        var tabAccordionBuilder = function (items) {
            var res = {root: mw.element('<div class="mw-tab-accordion" data-options="tabsSize: medium" />'), items: []};
            items.forEach(function (item){
                var el = mw.element('<div class="mw-accordion-item" />');
                var content = mw.element('<div class="mw-accordion-content mw-ui-box mw-ui-box-content">' +(item.content || '') +'</div>');
                var title = mw.element('<div class="mw-ui-box-header mw-accordion-title">' + item.title +'</div>');
                el.append(title);
                el.append(content);

                res.root.append(el);
                res.items.push({
                    title: title,
                    content: content,
                    root: el,
                });
            });
            setTimeout(function (){
                if(mw.components) {
                    mw.components._init();
                }
            }, 10);
            return res;
        };

        var createUI = function () {
            var root = mw.element({
                props: { className: 'mw-icon-selector-root' }
            });
            var iconsBlockHolder, tabs, optionsHolder, iconsHolder;
            if(scope.settings.iconOptions) {
                tabs = tabAccordionBuilder([
                    {title: 'Icons'},
                    {title: 'Options'},
                ]);
                iconsBlockHolder = tabs.items[0].content;
                optionsHolder = tabs.items[1].content;
                root.append(tabs.root)
            } else {
                iconsBlockHolder = mw.element();
                root.append(iconsBlockHolder);
            }
            iconsHolder = mw.element().addClass('mw-icon-picker-icons-holder');
            iconsBlockHolder.append(iconsHolder);
            return {
                root: root,
                tabs: tabs,
                iconsBlockHolder: iconsBlockHolder,
                iconsHolder: iconsHolder,
                optionsHolder: optionsHolder
            };
        };


        var _e = {};

        this.on = function (e, f) { _e[e] ? _e[e].push(f) : (_e[e] = [f]) };
        this.dispatch = function (e, f) { _e[e] ? _e[e].forEach(function (c){ c.call(this, f); }) : ''; };

        var actionNodes = {};

        var createOptions = function (holder) {

            if(holder && scope.settings.iconOptions) {
                if(scope.settings.iconOptions.size) {
                    var label = mw.element('<div class="mw-icon-selector-flex"> <label class="mw-icon-selector-control-label mw-icon-selector-6-column">Icon size in px</label> <label class="mw-icon-selector-control-label mw-icon-selector-6-column ps-2">Select size from range</label> </div>');
                    var sizeel = mw.element('<div class="mwiconlist-settings-section-block-item mw-icon-selector-flex  mw-icon-selector-12-column"></div>');
                    var sizeinput = mw.element('<input class="mw-icon-selector-form-control mw-icon-selector-6-column" type="number" min="8" max="200">');
                    var sizeinput2 = mw.element('<input class="mw-icon-selector-form-control mw-icon-selector-6-column" type="range" min="8" max="200">');

                    actionNodes.size = sizeinput;
                    sizeinput.on('input', function () {
                        scope.dispatch('sizeChange', sizeinput.get(0).value);
                        sizeinput2.val(sizeinput.get(0).value);
                    });
                    sizeinput2.on('input', function () {
                        sizeinput.val(sizeinput2.get(0).value);
                        scope.dispatch('sizeChange', sizeinput.get(0).value);
                    });

                    holder.append(label);
                    sizeel.append(sizeinput);
                    sizeel.append(sizeinput2);
                    holder.append(sizeel);
                }
                if(scope.settings.iconOptions.color) {
                    cel = mw.element('<div class="mwiconlist-settings-section-block-item"><label class="mw-icon-selector-control-label  ps-2">Choose color</label></div>');
                    cinput = mw.element('<input class="mw-icon-selector-form-control mw-icon-selector-2-column" type="color">');
                    actionNodes.color = cinput;
                    cinput.on('input', function () {
                        scope.dispatch('colorChange', cinput.get(0).value);
                    });
                    cel.append(cinput);
                    holder.append(cel);
                }
                if(scope.settings.iconOptions.reset) {
                    var rel = mw.element('<div class="mwiconlist-settings-section-block-item"> </div>');
                    var rinput = mw.element('<input type="button" class="mw-ui-btn" value="Reset options">');
                    rinput.on('click', function () {
                        scope.dispatch('reset', rinput.get(0).value);
                    });
                    rel.append(rinput);
                    holder.append(rel);
                }
            }
        };

        var _prepareIconsLists = function (c) {
            var sets = loader.storage();
            var all = sets.length;
            var i = 0;
             sets.forEach(function (set){
                 if (!set._iconsLists) {
                     (function (aset){
                         aset.icons().then(function (data){
                             aset._iconsLists = data;
                             i++;
                             if(i === all) c.call(sets, sets);
                         });
                     })(set);
                 } else {
                     i++;
                     if(i === all) c.call(sets, sets);
                 }

            });
        };


        var createPaging = function(length, page){
            page = page || 1;
            var max = 999;
            var pages = Math.min(Math.ceil(length/scope.settings.iconsPerPage), max);
            var paging = document.createElement('div');
            paging.className = 'mw-paging mw-paging-small mw-icon-selector-paging';
            if(scope.settings.iconsPerPage >= length ) {
                return paging;
            }
            var active = false;
            for ( var i = 1; i <= pages; i++) {
                var el = document.createElement('a');
                el.innerHTML = i;
                el._value = i;
                if(page === i) {
                    el.className = 'active';
                    active = i;
                }
                el.onclick = function () {
                    comRender({page: this._value });
                };
                paging.appendChild(el);
            }
            var all = paging.querySelectorAll('a');
            for (var i = active - 3; i < active + 2; i++){
                if(all[i]) {
                    all[i].className += ' mw-paging-visible-range';
                }
            }


            if(active < pages) {
                var next = document.createElement('a');
                next.innerHTML = '&raquo;';
                next._value = active+1;
                next.className = 'mw-paging-visible-range mw-paging-next';
                next.innerHTML = '&raquo;';
                $(paging).append(next);
                next.onclick = function () {
                     comRender({page: this._value });
                }
            }
            if(active > 1) {
                var prev = document.createElement('a');
                prev.className = 'mw-paging-visible-range mw-paging-prev';
                prev.innerHTML = '&laquo;';
                prev._value = active-1;
                $(paging).prepend(prev);
                prev.onclick = function () {
                     comRender({page: this._value });
                };
            }

            return paging;
        };

        var searchField = function () {
            var time = null;
            scope.searchField =  mw.element({
                tag: 'input',
                props: {
                    className: 'mw-ui-searchfield w100',
                    placeholder: 'Search',
                    oninput: function () {
                        clearTimeout(time);
                        time = setTimeout(function (){
                            comRender();
                        }, 123);
                    }
                }
            });

            return scope.searchField;
        };

        var comRender = function (options) {
            options = options || {};
            options = mw.object.extend({}, {
                set: scope.selectField.get(0).options[scope.selectField.get(0).selectedIndex]._value,
                term: scope.searchField.get(0).value
            }, options);
            scope.ui.iconsHolder.empty().append(renderSearchResults(options));
        };

        var searchSelector = function () {
            var sel = mw.element('<select class="mw-ui-field w100" />');
            scope.selectField = sel;
            loader.storage().forEach(function (item) {
                var el = document.createElement('option');
                el._value = item;
                el.innerHTML = item.name;
                sel.append(el);
            });
            sel.on('change', function (){
                comRender()
            });
            return sel;
        };

        var search = function (conf) {
            conf = conf || {};
            conf.set = conf.set ||  loader.storage()[0];
            conf.page = conf.page || 1;
            conf.term = (conf.term || '').trim().toLowerCase();

            if (!conf.set._iconsLists) {
                return;
            }

            var all = conf.set._iconsLists.filter(function (f){ return f.toLowerCase().indexOf(conf.term) !== -1; });

            var off = scope.settings.iconsPerPage * (conf.page - 1);
            var to = off + Math.min(all.length - off, scope.settings.iconsPerPage);

            return mw.object.extend({}, conf, {
                data: all.slice(off, to),
                all: all,
                off: off
            });
            /*for ( var i = off; i < to; i++ ) {

            }*/
        };

        var renderSearchResults = function (conf) {
            var res = search(conf);
            if(!res) return;
            var pg = createPaging(res.all.length, res.page);
            var root = mw.element();
            res.data.forEach(function (iconItem){
                var icon = mw.element({
                    tag: 'span',
                    props: {
                        className: 'mwiconlist-icon',
                        onclick: function (e) {
                            scope.dispatch('select', {
                                icon: iconItem,
                                renderer: res.set.render,
                                render: function () {
                                    var sets = loader.storage();
                                    sets.forEach(function (set) {
                                        set.remove(scope.target)
                                    })
                                    return res.set.render(iconItem, scope.target);
                                }
                            });
                            setTimeout(function (){
                                mw.trigger('iconInserted')
                            })
                        }
                    }
                });
                root.append(icon);
                res.set.render(iconItem, icon.get(0));
            });
            root.append(pg)
            return root;
        };

        var createIconsBlock = function () {
            mw.spinner({element: scope.ui.iconsHolder.get(0), size: 30}).show();
            _prepareIconsLists(function (){
                comRender();
                mw.spinner({element: scope.ui.iconsHolder.get(0)}).hide();
            });
        };

        this.create = function () {
            this.ui = createUI();
            createOptions(this.ui.optionsHolder);
            this.ui.iconsBlockHolder.prepend(searchField());

            this.ui.iconsBlockHolder.prepend(searchSelector());
            createIconsBlock();

        };

        this.get = function () {
            return this.ui.root.get(0);
        };

        this.dialog = function (method) {
            if(method === 'hide') {
                this._dialog.hide();
                return;
            }
            if(!this._dialog) {
                this._dialog = mw.top().dialog({content: this.get(), title: 'Select icon', closeButtonAction: 'hide', width: 450});
                mw.components._init();
            }
            this._dialog.show();
            return this._dialog;
        };

        this.destroy = function () {
            this.get().remove()
            if(this._dialog) {
                this._dialog.remove();
            }
            if(this._tooltip) {
                this._tooltip.remove();
            }
        };

        this.target = null;

        this.tooltip = function (target) {
            this.target = target;
            if(target === 'hide' && this._tooltip) {
                this._tooltip.style.display = 'none';
            } else {
                if (!this._tooltip) {
                    this._tooltip = mw.tooltip({
                        content: this.get(),
                        element: target,
                        position: 'bottom-center',
                    });
                } else {
                    mw.tools.tooltip.setPosition(this._tooltip, target, 'bottom-center');
                }

                this._tooltip.style.display = 'block';
                if(target.nodeType === 1) {
                    var css = getComputedStyle(target);
                    $('[type="number"],[type="range"]', this._tooltip).val(parseFloat(css.fontSize));

                    $('[type="color"]', this._tooltip).val(mw.color.rgbOrRgbaToHex(css.color));
                }

            }

            mw.components._init();
            return this._tooltip;
        };

        this.init = function () {
            this.create();
        };

        this.promise = function () {
            return new Promise(function (resolve){
               scope.on('select', function (data) {
                   resolve(data);
               });
            });
        };

        this.init();

    };


    mw.iconPicker = function (options) {
        return new IconPicker(options);
    };

})();






